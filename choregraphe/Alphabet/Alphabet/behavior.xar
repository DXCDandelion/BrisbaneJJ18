<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Say (1)" id="13" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="365" y="244">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Everyone stop what you are doing ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Everyone stop what you are doing]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>7</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Stop gesture" id="14" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="363" y="135">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="10">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.74028" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-23.5135" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-68.3941" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="10" value="0.3" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.72958" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.74028" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="84.3598" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="10.6237" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.72958" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="22.7567" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="67.0752" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="10" value="0.990005" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.72958" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.74028" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="1.74217" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-7.37063" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-63.8516" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Play Sound" id="15" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="1296" y="210">
                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../NO TITLE.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                            <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                            <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                            <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                            <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                                <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                            </Box>
                                            <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                                <bitmap>media/images/box/folder.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Audio player" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Goto Posture" id="17" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="959" y="175">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                <Choice value="Crouch" />
                                <Choice value="LyingBack" />
                                <Choice value="LyingBelly" />
                                <Choice value="Sit" />
                                <Choice value="SitRelax" />
                                <Choice value="StandInit" />
                                <Choice value="Stand" />
                                <Choice value="StandZero" />
                            </Parameter>
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Point to ears" id="18" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="661" y="138">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="10">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.74028" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-88.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-26.1" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="10" value="1" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.72958" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.74028" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-48.9" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="47.6" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-85.3" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="88.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="26.1" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="10" value="1" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.44845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.72958" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.74028" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.15662" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-48.9" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-47.6" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="85.3" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Say (2)" id="19" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="662" y="242">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " And listen closely ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[And listen closely]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>7</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Wait For Signals (1)" id="20" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="811" y="172">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*3

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*3
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)

    def onInput_signal3(self):
        self.onStart(3)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                            <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                            <Input name="signal3" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="5" />
                        </Box>
                        <Box name="Say (3)" id="22" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1108" y="232">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="116" y="70">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Today we will be singing a song about the letters of the alphabet and what sounds they make. Be sure to follow along. Let\'s begin ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Today we will be singing a song about the letters of the alphabet and what sounds they make. Be sure to follow along. Let's begin]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (4)" id="23" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1784" y="271">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Thank you for singing along with me ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Thank you for singing along with me]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>7</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Wait 0" id="25" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="115" y="303">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Ear pattern" id="27" localization="8" tooltip="Enter description here" x="664" y="348">
                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                            <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Single Ear LED" id="8" localization="8" tooltip="Set the intensity of one ear LED." x="303" y="36">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (1)" id="1" localization="8" tooltip="Set the intensity of one ear LED." x="437" y="35">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="36" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (2)" id="2" localization="8" tooltip="Set the intensity of one ear LED." x="715" y="36">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="108" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (3)" id="3" localization="8" tooltip="Set the intensity of one ear LED." x="573" y="32">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="72" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (4)" id="4" localization="8" tooltip="Set the intensity of one ear LED." x="838" y="40">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="144" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (5)" id="5" localization="8" tooltip="Set the intensity of one ear LED." x="1504" y="45">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="324" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (6)" id="6" localization="8" tooltip="Set the intensity of one ear LED." x="1375" y="42">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="288" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (7)" id="7" localization="8" tooltip="Set the intensity of one ear LED." x="1235" y="38">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="252" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (8)" id="9" localization="8" tooltip="Set the intensity of one ear LED." x="970" y="40">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="180" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (9)" id="10" localization="8" tooltip="Set the intensity of one ear LED." x="1100" y="38">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="216" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="21" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1747" y="265">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Counter" id="24" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="146" y="218">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="Wait 0" id="25" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1664" y="567">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait 0" id="22" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="183" y="572">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Ear LEDs" id="31" localization="8" tooltip="Set the intensity of all the LEDs of one of or both ears." x="78" y="83">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftEarLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightEarLeds"
        else:
            sGroup = "EarLeds"
        id = self.leds.post.fade(sGroup, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LEDs intensity, from 0 (off) to 100 (max)." id="5" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                            </Box>
                                            <Box name="Single Ear LED (10)" id="11" localization="8" tooltip="Set the intensity of one ear LED." x="419" y="147">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (11)" id="12" localization="8" tooltip="Set the intensity of one ear LED." x="550" y="145">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="36" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (12)" id="13" localization="8" tooltip="Set the intensity of one ear LED." x="828" y="146">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="108" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (13)" id="14" localization="8" tooltip="Set the intensity of one ear LED." x="686" y="142">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="72" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (14)" id="15" localization="8" tooltip="Set the intensity of one ear LED." x="951" y="150">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="144" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (15)" id="16" localization="8" tooltip="Set the intensity of one ear LED." x="1617" y="155">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="324" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (16)" id="17" localization="8" tooltip="Set the intensity of one ear LED." x="1488" y="152">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="288" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (17)" id="18" localization="8" tooltip="Set the intensity of one ear LED." x="1348" y="148">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="252" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (18)" id="19" localization="8" tooltip="Set the intensity of one ear LED." x="1083" y="150">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="180" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (19)" id="20" localization="8" tooltip="Set the intensity of one ear LED." x="1213" y="148">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="216" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (20)" id="23" localization="8" tooltip="Set the intensity of one ear LED." x="308" y="321">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (21)" id="26" localization="8" tooltip="Set the intensity of one ear LED." x="439" y="319">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="36" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (22)" id="27" localization="8" tooltip="Set the intensity of one ear LED." x="717" y="320">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="108" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (23)" id="28" localization="8" tooltip="Set the intensity of one ear LED." x="575" y="316">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="72" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (24)" id="29" localization="8" tooltip="Set the intensity of one ear LED." x="840" y="324">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="144" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (25)" id="30" localization="8" tooltip="Set the intensity of one ear LED." x="1506" y="329">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="324" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (26)" id="32" localization="8" tooltip="Set the intensity of one ear LED." x="1377" y="326">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="288" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (27)" id="33" localization="8" tooltip="Set the intensity of one ear LED." x="1237" y="322">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="252" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (28)" id="34" localization="8" tooltip="Set the intensity of one ear LED." x="972" y="324">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="180" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (29)" id="35" localization="8" tooltip="Set the intensity of one ear LED." x="1102" y="322">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="216" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (30)" id="36" localization="8" tooltip="Set the intensity of one ear LED." x="419" y="433">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (31)" id="37" localization="8" tooltip="Set the intensity of one ear LED." x="550" y="431">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="36" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (32)" id="38" localization="8" tooltip="Set the intensity of one ear LED." x="828" y="432">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="108" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (33)" id="39" localization="8" tooltip="Set the intensity of one ear LED." x="686" y="428">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="72" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (34)" id="40" localization="8" tooltip="Set the intensity of one ear LED." x="951" y="436">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="144" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (35)" id="41" localization="8" tooltip="Set the intensity of one ear LED." x="1617" y="441">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="324" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (36)" id="42" localization="8" tooltip="Set the intensity of one ear LED." x="1488" y="438">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="288" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (37)" id="43" localization="8" tooltip="Set the intensity of one ear LED." x="1348" y="434">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="252" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (38)" id="44" localization="8" tooltip="Set the intensity of one ear LED." x="1083" y="436">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="180" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Single Ear LED (39)" id="45" localization="8" tooltip="Set the intensity of one ear LED." x="1217" y="436">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_onStart(self):
        """Fade the ear Led you have chosen to the intensity you have chosen with the duration you have chosen!"""
        sName = "Ears/Led/"+self.getParameter("Side")+"/"+ self.getParameter("Angle (degrees)") +"Deg/Actuator/Value"
        id = self.leds.post.fade(sName, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Left" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="216" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s ear. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Ear    -&gt; (Front) &lt;-     Left Ear&#x0A;                     &#x0A;     108° .   . 72°                     72° .   . 108°&#x0A;  144° .         . 36°   (o)  (o)   36° .         . 144°&#x0A;180° .             . 0°               0° .             . 180°&#x0A;  216° .         . 324°            324° .         . 216°&#x0A;     252° .   . 288°                  288° .   . 252°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="36" />
                                                    <Choice value="72" />
                                                    <Choice value="108" />
                                                    <Choice value="144" />
                                                    <Choice value="180" />
                                                    <Choice value="216" />
                                                    <Choice value="252" />
                                                    <Choice value="288" />
                                                    <Choice value="324" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LED intensity, from 0 (off) to 100 (max)." id="6" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="7" />
                                            </Box>
                                            <Box name="Ear LEDs (1)" id="46" localization="8" tooltip="Set the intensity of all the LEDs of one of or both ears." x="957" y="569">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftEarLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightEarLeds"
        else:
            sGroup = "EarLeds"
        id = self.leds.post.fade(sGroup, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LEDs intensity, from 0 (off) to 100 (max)." id="5" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="3" outputowner="25" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="22" indexofinput="2" outputowner="24" indexofoutput="5" />
                                            <Link inputowner="31" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="24" indexofinput="2" outputowner="21" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="13" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="19" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="20" indexofinput="2" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="17" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="21" indexofinput="2" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="16" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="36" indexofinput="2" outputowner="23" indexofoutput="3" />
                                            <Link inputowner="37" indexofinput="2" outputowner="26" indexofoutput="3" />
                                            <Link inputowner="39" indexofinput="2" outputowner="28" indexofoutput="3" />
                                            <Link inputowner="38" indexofinput="2" outputowner="27" indexofoutput="3" />
                                            <Link inputowner="40" indexofinput="2" outputowner="29" indexofoutput="3" />
                                            <Link inputowner="44" indexofinput="2" outputowner="34" indexofoutput="3" />
                                            <Link inputowner="43" indexofinput="2" outputowner="33" indexofoutput="3" />
                                            <Link inputowner="45" indexofinput="2" outputowner="35" indexofoutput="3" />
                                            <Link inputowner="42" indexofinput="2" outputowner="32" indexofoutput="3" />
                                            <Link inputowner="41" indexofinput="2" outputowner="30" indexofoutput="3" />
                                            <Link inputowner="23" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="21" indexofinput="3" outputowner="41" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="26" indexofinput="2" outputowner="23" indexofoutput="3" />
                                            <Link inputowner="28" indexofinput="2" outputowner="26" indexofoutput="3" />
                                            <Link inputowner="27" indexofinput="2" outputowner="28" indexofoutput="3" />
                                            <Link inputowner="29" indexofinput="2" outputowner="27" indexofoutput="3" />
                                            <Link inputowner="34" indexofinput="2" outputowner="29" indexofoutput="3" />
                                            <Link inputowner="35" indexofinput="2" outputowner="34" indexofoutput="3" />
                                            <Link inputowner="33" indexofinput="2" outputowner="35" indexofoutput="3" />
                                            <Link inputowner="32" indexofinput="2" outputowner="33" indexofoutput="3" />
                                            <Link inputowner="30" indexofinput="2" outputowner="32" indexofoutput="3" />
                                            <Link inputowner="46" indexofinput="2" outputowner="22" indexofoutput="4" />
                                            <Link inputowner="25" indexofinput="2" outputowner="46" indexofoutput="3" />
                                            <Link inputowner="24" indexofinput="2" outputowner="31" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Eye LEDs" id="28" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="366" y="355">
                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                <Choice value="Both" />
                                <Choice value="Left" />
                                <Choice value="Right" />
                            </Parameter>
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="2" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = self.leds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                            </Box>
                                            <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <color>#ff0000</color>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                            </Box>
                                            <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Wait For Signals (3)" id="29" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="516" y="235">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*3

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*3
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)

    def onInput_signal3(self):
        self.onStart(3)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                            <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                            <Input name="signal3" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="5" />
                        </Box>
                        <Box name="Dance Animation (1)" id="5" localization="8" tooltip="Dancing Animation for singalong" x="1429" y="327">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="90">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.10792" />
                                        <Key frame="20" value="4.96468" />
                                        <Key frame="30" value="4.70946" />
                                        <Key frame="40" value="5.11884" />
                                        <Key frame="50" value="4.69083" />
                                        <Key frame="60" value="4.96468" />
                                        <Key frame="70" value="4.93725" />
                                        <Key frame="80" value="4.58541" />
                                        <Key frame="90" value="4.58541" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-7.25709" />
                                        <Key frame="20" value="-7.25709" />
                                        <Key frame="30" value="-7.23801" />
                                        <Key frame="40" value="-7.13822" />
                                        <Key frame="50" value="-7.15144" />
                                        <Key frame="60" value="-6.98154" />
                                        <Key frame="70" value="-7.02265" />
                                        <Key frame="80" value="-7.24597" />
                                        <Key frame="90" value="-7.24597" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.393" />
                                        <Key frame="20" value="7.2299" />
                                        <Key frame="30" value="6.95219" />
                                        <Key frame="40" value="7.36304" />
                                        <Key frame="50" value="6.91752" />
                                        <Key frame="60" value="7.2299" />
                                        <Key frame="70" value="6.95521" />
                                        <Key frame="80" value="7.36304" />
                                        <Key frame="90" value="7.36304" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.55411" />
                                        <Key frame="20" value="5.55411" />
                                        <Key frame="30" value="5.27004" />
                                        <Key frame="40" value="5.44511" />
                                        <Key frame="50" value="5.46405" />
                                        <Key frame="60" value="5.30144" />
                                        <Key frame="70" value="5.3385" />
                                        <Key frame="80" value="5.54391" />
                                        <Key frame="90" value="5.54391" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.56142" />
                                        <Key frame="20" value="-9.56142" />
                                        <Key frame="30" value="-9.27187" />
                                        <Key frame="40" value="-9.45032" />
                                        <Key frame="50" value="-9.46962" />
                                        <Key frame="60" value="-9.30387" />
                                        <Key frame="70" value="-9.34165" />
                                        <Key frame="80" value="-9.55103" />
                                        <Key frame="90" value="-9.55103" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.06517" />
                                        <Key frame="20" value="-4.79617" />
                                        <Key frame="30" value="-4.66738" />
                                        <Key frame="40" value="-5.05557" />
                                        <Key frame="50" value="-4.93023" />
                                        <Key frame="60" value="-4.79617" />
                                        <Key frame="70" value="-5.15662" />
                                        <Key frame="80" value="-5.05557" />
                                        <Key frame="90" value="-5.05557" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="4.5893" />
                                        <Key frame="20" value="4.5893" />
                                        <Key frame="30" value="4.75523" />
                                        <Key frame="40" value="4.82479" />
                                        <Key frame="50" value="4.92184" />
                                        <Key frame="60" value="4.5893" />
                                        <Key frame="70" value="4.68314" />
                                        <Key frame="80" value="4.94005" />
                                        <Key frame="90" value="4.94005" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.2135" />
                                        <Key frame="20" value="7.2135" />
                                        <Key frame="30" value="7.2135" />
                                        <Key frame="40" value="7.2135" />
                                        <Key frame="50" value="7.2135" />
                                        <Key frame="60" value="7.2135" />
                                        <Key frame="70" value="7.2135" />
                                        <Key frame="80" value="7.2135" />
                                        <Key frame="90" value="7.2135" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="7.3898" />
                                        <Key frame="20" value="7.21728" />
                                        <Key frame="30" value="6.92355" />
                                        <Key frame="40" value="7.35812" />
                                        <Key frame="50" value="6.88688" />
                                        <Key frame="60" value="7.21728" />
                                        <Key frame="70" value="6.92675" />
                                        <Key frame="80" value="7.35812" />
                                        <Key frame="90" value="7.35812" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.54884" />
                                        <Key frame="20" value="-5.54884" />
                                        <Key frame="30" value="-5.54884" />
                                        <Key frame="40" value="-5.54884" />
                                        <Key frame="50" value="-5.54884" />
                                        <Key frame="60" value="-5.54884" />
                                        <Key frame="70" value="-5.54884" />
                                        <Key frame="80" value="-5.54884" />
                                        <Key frame="90" value="-5.54884" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-9.56142" />
                                        <Key frame="20" value="-9.56142" />
                                        <Key frame="30" value="-9.27187" />
                                        <Key frame="40" value="-9.45032" />
                                        <Key frame="50" value="-9.46962" />
                                        <Key frame="60" value="-9.30387" />
                                        <Key frame="70" value="-9.34165" />
                                        <Key frame="80" value="-9.55103" />
                                        <Key frame="90" value="-9.55103" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-5.08275" />
                                        <Key frame="20" value="-4.86549" />
                                        <Key frame="30" value="-4.69682" />
                                        <Key frame="40" value="-5.06375" />
                                        <Key frame="50" value="-5.15662" />
                                        <Key frame="60" value="-4.86549" />
                                        <Key frame="70" value="-4.61423" />
                                        <Key frame="80" value="-5.06375" />
                                        <Key frame="90" value="-5.06375" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-88.3939" />
                                        <Key frame="30" value="-73.7454" />
                                        <Key frame="50" value="-57" />
                                        <Key frame="70" value="-73.7454" />
                                        <Key frame="90" value="-88.3939" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-68.7453" />
                                        <Key frame="30" value="-68.0303" />
                                        <Key frame="70" value="-68.0303" />
                                        <Key frame="90" value="-68.7453" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="10" value="0" />
                                        <Key frame="30" value="0" />
                                        <Key frame="70" value="0" />
                                        <Key frame="90" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="86.6267" />
                                        <Key frame="30" value="86.9958" />
                                        <Key frame="70" value="86.9958" />
                                        <Key frame="90" value="86.6267" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="17.6481" />
                                        <Key frame="30" value="32.7887" />
                                        <Key frame="50" value="14.3" />
                                        <Key frame="70" value="32.7887" />
                                        <Key frame="90" value="17.6481" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.21442" />
                                        <Key frame="30" value="5.21442" />
                                        <Key frame="70" value="5.21442" />
                                        <Key frame="90" value="5.21442" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="61.6634" />
                                        <Key frame="30" value="72.2108" />
                                        <Key frame="50" value="88.5" />
                                        <Key frame="70" value="72.2108" />
                                        <Key frame="90" value="61.6634" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="68.6395" />
                                        <Key frame="30" value="68.0974" />
                                        <Key frame="70" value="68.0974" />
                                        <Key frame="90" value="68.6395" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="10" value="0" />
                                        <Key frame="30" value="0" />
                                        <Key frame="70" value="0" />
                                        <Key frame="90" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="84.9485" />
                                        <Key frame="30" value="86.7066" />
                                        <Key frame="70" value="86.7066" />
                                        <Key frame="90" value="84.9485" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="-14.5494" />
                                        <Key frame="30" value="-37.319" />
                                        <Key frame="50" value="-22.1" />
                                        <Key frame="70" value="-37.319" />
                                        <Key frame="90" value="-14.5494" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="10" value="5.21442" />
                                        <Key frame="30" value="5.21442" />
                                        <Key frame="70" value="5.21442" />
                                        <Key frame="90" value="5.21442" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Goto Posture (3)" id="6" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="1619" y="197">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                <Choice value="Crouch" />
                                <Choice value="LyingBack" />
                                <Choice value="LyingBelly" />
                                <Choice value="Sit" />
                                <Choice value="SitRelax" />
                                <Choice value="StandInit" />
                                <Choice value="Stand" />
                                <Choice value="StandZero" />
                            </Parameter>
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Counter" id="24" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1280" y="363">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="44" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                        </Box>
                        <Box name="Wait For Signals" id="21" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1483" y="199">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                            <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                            <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                        </Box>
                        <Link inputowner="20" indexofinput="2" outputowner="18" indexofoutput="4" />
                        <Link inputowner="20" indexofinput="3" outputowner="19" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="20" indexofoutput="5" />
                        <Link inputowner="22" indexofinput="2" outputowner="17" indexofoutput="4" />
                        <Link inputowner="14" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="13" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="20" indexofinput="4" outputowner="27" indexofoutput="3" />
                        <Link inputowner="18" indexofinput="2" outputowner="29" indexofoutput="5" />
                        <Link inputowner="19" indexofinput="2" outputowner="29" indexofoutput="5" />
                        <Link inputowner="27" indexofinput="2" outputowner="29" indexofoutput="5" />
                        <Link inputowner="29" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="29" indexofinput="3" outputowner="13" indexofoutput="4" />
                        <Link inputowner="29" indexofinput="4" outputowner="28" indexofoutput="3" />
                        <Link inputowner="28" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="4" outputowner="23" indexofoutput="4" />
                        <Link inputowner="23" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="24" indexofoutput="4" />
                        <Link inputowner="24" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="24" indexofinput="2" outputowner="22" indexofoutput="4" />
                        <Link inputowner="21" indexofinput="3" outputowner="24" indexofoutput="5" />
                        <Link inputowner="6" indexofinput="2" outputowner="21" indexofoutput="4" />
                        <Link inputowner="15" indexofinput="2" outputowner="22" indexofoutput="4" />
                        <Link inputowner="21" indexofinput="2" outputowner="15" indexofoutput="4" />
                        <Link inputowner="25" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
